import psycopg2
import csv
import configparser

import psycopg2
from config import load_config

params = load_config()  # {'host': ..., 'database': ..., ...}
conn = psycopg2.connect(**params)
cur = conn.cursor()


# 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
def create_table():
    cur.execute("""
    CREATE TABLE IF NOT EXISTS phonebook (
        id SERIAL PRIMARY KEY,
        username VARCHAR(100) NOT NULL,
        phone VARCHAR(20) NOT NULL
    );
    """)
    conn.commit()

# 2. –í—Å—Ç–∞–≤–∫–∞ –∏–∑ CSV
def insert_from_csv(filename):
    with open(filename, newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            if len(row) >= 2:
                cur.execute("INSERT INTO phonebook (username, phone) VALUES (%s, %s)", (row[0], row[1]))
    conn.commit()
    print("–î–∞–Ω–Ω—ã–µ –∏–∑ CSV –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

# 2. –í—Å—Ç–∞–≤–∫–∞ –≤—Ä—É—á–Ω—É—é
def insert_from_console():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
    cur.execute("INSERT INTO phonebook (username, phone) VALUES (%s, %s)", (name, phone))
    conn.commit()
    print("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

# 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def update_data():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å: ")
    print("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n1. –ò–º—è\n2. –¢–µ–ª–µ—Ñ–æ–Ω")
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ (1/2): ")
    if choice == '1':
        new_name = input("–ù–æ–≤–æ–µ –∏–º—è: ")
        cur.execute("UPDATE phonebook SET username = %s WHERE username = %s", (new_name, name))
    elif choice == '2':
        new_phone = input("–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ")
        cur.execute("UPDATE phonebook SET phone = %s WHERE username = %s", (new_phone, name))
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return
    conn.commit()
    print("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

# 4. –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö
def query_data():
    print("–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞:\n1. –ü–æ –∏–º–µ–Ω–∏\n2. –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n3. –í—Å–µ –∑–∞–ø–∏—Å–∏")
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ: ")
    if choice == '1':
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
        cur.execute("SELECT * FROM phonebook WHERE username ILIKE %s", (f"%{name}%",))
    elif choice == '2':
        phone = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
        cur.execute("SELECT * FROM phonebook WHERE phone = %s", (phone,))
    else:
        cur.execute("SELECT * FROM phonebook")
    rows = cur.fetchall()
    for row in rows:
        print(row)

# 5. –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def delete_data():
    print("–£–¥–∞–ª–∏—Ç—å –ø–æ:\n1. –ò–º–µ–Ω–∏\n2. –¢–µ–ª–µ—Ñ–æ–Ω—É")
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ: ")
    if choice == '1':
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
        cur.execute("DELETE FROM phonebook WHERE username = %s", (name,))
    elif choice == '2':
        phone = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
        cur.execute("DELETE FROM phonebook WHERE phone = %s", (phone,))
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return
    conn.commit()
    print("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

# –ú–µ–Ω—é
def menu():
    create_table()
    while True:
        print("\nüìí –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞:")
        print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é")
        print("3. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("4. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("5. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("6. –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        if choice == '1':
            insert_from_csv("data.csv")
        elif choice == '2':
            insert_from_console()
        elif choice == '3':
            update_data()
        elif choice == '4':
            query_data()
        elif choice == '5':
            delete_data()
        elif choice == '6':
            break
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ó–∞–ø—É—Å–∫
menu()
cur.close()
conn.close()
